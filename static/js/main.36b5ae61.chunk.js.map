{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bell","Audio","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","extendObservable","assertThisInitialized","cycleStats","timeLeft","dayOrNight","timeInterval","updateCetusCycle","react_default","a","createElement","className","s","secs","mins","msToTime","_this2","fetch","then","res","json","data","isDay","play","console","log","Date","updateTimeLeft","clearInterval","setInterval","catch","setTimeout","expiry","getTime","now","Component","observer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAKMA,EAAO,IAAIC,MAAM,2BAEjBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACNQ,YAAiBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,IAAM,CACrBS,WAAY,GACZC,SAAU,EACVC,WAAY,KAEdX,EAAKY,aAAe,KACpBZ,EAAKa,mBARYb,wEAYjB,OACEG,KAAKM,YACHK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEbH,EAAAC,EAAAC,cAAA,6BAAqBb,KAAKQ,YAC1BG,EAAAC,EAAAC,cAAA,sBACa,IACQ,IAAlBb,KAAKO,SAiDlB,SAAkBQ,GAChB,IAEIC,GADJD,GAAKA,EADIA,EAAI,KACE,KACA,GAEXE,GADJF,GAAKA,EAAIC,GAAQ,IACF,GAEf,OADWD,EAAIE,GAAQ,GAGrB,KACCA,EAAO,GAAK,IAAMA,EAAOA,GAC1B,KACCD,EAAO,GAAK,IAAMA,EAAOA,GA5DdE,CAASlB,KAAKO,UACd,kEAOK,IAAAY,EAAAnB,KACjBoB,MAAM,6CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJL,EAAKb,WAAakB,EACdA,IAAuB,IAAfA,EAAKC,OAAuC,QAApBN,EAAKX,YACvCf,EAAKiC,OACHP,EAAKb,aACPa,EAAKX,WAAaW,EAAKb,WAAWmB,MAAQ,MAAQ,SACpDE,QAAQC,IAAIT,EAAKb,WAAY,IAAIuB,MACjCV,EAAKW,iBACDX,EAAKV,cAAcsB,cAAcZ,EAAKV,cACtCU,EAAKZ,SAAW,GAClBwB,cAAcZ,EAAKV,cACnBU,EAAKZ,SAAW,EAChBY,EAAKV,aAAeuB,YAAY,WAC9Bb,EAAKT,oBACJ,MAEHS,EAAKV,aAAeuB,YAAY,WAC9Bb,EAAKW,iBACDX,EAAKZ,SAAW,IAClBwB,cAAcZ,EAAKV,cACnBU,EAAKT,qBAEN,OAGNuB,MAAM,WACLC,WAAW,WACTf,EAAKT,oBACJ,gDAKPV,KAAKO,SAAW,IAAIsB,KAAK7B,KAAKM,WAAW6B,QAAQC,UAAYP,KAAKQ,aAjEpDC,aAqFHC,kBAAS5C,GChFJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.36b5ae61.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css'\r\nimport { extendObservable } from 'mobx'\r\nimport { observer } from 'mobx-react'\r\n\r\nconst bell = new Audio('/MM_ClockTower_Bell.wav')\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    extendObservable(this, {\r\n      cycleStats: {},\r\n      timeLeft: 0,\r\n      dayOrNight: ''\r\n    })\r\n    this.timeInterval = null\r\n    this.updateCetusCycle()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.cycleStats && (\r\n        <div className=\"cycle-stats\">\r\n          {/* {JSON.stringify(this.cycleStats)} */}\r\n          <p>Currently it is: {this.dayOrNight}</p>\r\n          <p>\r\n            Time left:{' '}\r\n            {this.timeLeft !== 0\r\n              ? msToTime(this.timeLeft)\r\n              : 'awaiting update...'}\r\n          </p>\r\n        </div>\r\n      )\r\n    )\r\n  }\r\n\r\n  updateCetusCycle() {\r\n    fetch('https://api.warframestat.us/pc/cetusCycle')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.cycleStats = data\r\n        if (data && data.isDay === false && this.dayOrNight === 'day')\r\n          bell.play()\r\n        if (this.cycleStats)\r\n          this.dayOrNight = this.cycleStats.isDay ? 'day' : 'night'\r\n        console.log(this.cycleStats, new Date())\r\n        this.updateTimeLeft()\r\n        if (this.timeInterval) clearInterval(this.timeInterval)\r\n        if (this.timeLeft < 0) {\r\n          clearInterval(this.timeInterval)\r\n          this.timeLeft = 0\r\n          this.timeInterval = setInterval(() => {\r\n            this.updateCetusCycle()\r\n          }, 20000)\r\n        } else {\r\n          this.timeInterval = setInterval(() => {\r\n            this.updateTimeLeft()\r\n            if (this.timeLeft < 0) {\r\n              clearInterval(this.timeInterval)\r\n              this.updateCetusCycle()\r\n            }\r\n          }, 250)\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setTimeout(() => {\r\n          this.updateCetusCycle()\r\n        }, 30000)\r\n      })\r\n  }\r\n\r\n  updateTimeLeft() {\r\n    this.timeLeft = new Date(this.cycleStats.expiry).getTime() - Date.now()\r\n  }\r\n}\r\n\r\nfunction msToTime(s) {\r\n  let ms = s % 1000\r\n  s = (s - ms) / 1000\r\n  let secs = s % 60\r\n  s = (s - secs) / 60\r\n  let mins = s % 60\r\n  let hrs = (s - mins) / 60\r\n  return (\r\n    hrs +\r\n    ':' +\r\n    (mins < 10 ? '0' + mins : mins) +\r\n    ':' +\r\n    (secs < 10 ? '0' + secs : secs)\r\n  )\r\n}\r\n\r\nexport default observer(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}