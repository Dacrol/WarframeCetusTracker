{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bell","Audio","UnstyledList","styled","ul","_templateObject","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","extendObservable","assertThisInitialized","cycleStats","timeLeft","dayOrNight","soundEnabled","bounties","bellPlayed","timeInterval","updateCetusCycle","setInterval","length","_this2","react_default","a","createElement","className","s","secs","mins","msToTime","CustomInput","type","id","name","label","defaultChecked","onChange","e","currentTarget","checked","Container","Row","Array","isArray","jobs","map","bounty","index","Col","key","rewardPool","reward","_this3","fetch","then","res","json","cetusCycle","isDay","console","log","Date","updateTimeLeft","clearInterval","syndicateMissions","find","missions","syndicate","toJS","error","warn","catch","setTimeout","expiry","getTime","now","play","Component","observer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d600ec8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\nimport { extendObservable, toJS } from 'mobx'\r\nimport { observer } from 'mobx-react'\r\nimport { CustomInput, Container, Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\n\r\nconst bell = new Audio('./MM_ClockTower_Bell.wav')\r\n\r\nconst UnstyledList = styled.ul`\r\n  list-style: none;\r\n  padding: 0;\r\n  font-size: 0.9rem;\r\n  color: #bbbbbb;\r\n`\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    extendObservable(this, {\r\n      cycleStats: {},\r\n      timeLeft: 0,\r\n      dayOrNight: '',\r\n      soundEnabled: true,\r\n      bounties: [],\r\n      bellPlayed: false\r\n    })\r\n    this.timeInterval = null\r\n    this.updateCetusCycle()\r\n    setInterval(() => {\r\n      if (this.bounties.length === 0) {\r\n        this.updateCetusCycle()\r\n      }\r\n    }, 60000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.cycleStats && (\r\n        <div>\r\n          <div className=\"cycle-stats\">\r\n            {/* {JSON.stringify(this.cycleStats)} */}\r\n            <p>Currently it is: {this.dayOrNight}</p>\r\n            <p>\r\n              Time left:{' '}\r\n              {this.timeLeft !== 0\r\n                ? msToTime(this.timeLeft)\r\n                : 'awaiting update...'}\r\n            </p>\r\n            <CustomInput\r\n              type=\"switch\"\r\n              id=\"soundToggle\"\r\n              name=\"soundToggle\"\r\n              label=\"Enable sound on nightfall\"\r\n              defaultChecked\r\n              onChange={e => {\r\n                this.soundEnabled = e.currentTarget.checked\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Container className=\"text-center\">\r\n              <h4 className=\"mt-5 mb-2\">\r\n                Cetus Bounties\r\n              </h4>\r\n              <Row className=\"mt-4\">\r\n                {this.bounties &&\r\n                  Array.isArray(this.bounties.jobs) &&\r\n                  this.bounties.jobs.map((bounty, index) => (\r\n                    <Col key={index}>\r\n                      <h5>{bounty.type}</h5>\r\n                      {Array.isArray(bounty.rewardPool) && <UnstyledList>\r\n                        {bounty.rewardPool.map((reward, index) => <li key={index}>{reward}</li>)}\r\n                      </UnstyledList>}\r\n                    </Col>\r\n                  ))}\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        </div>\r\n      )\r\n    )\r\n  }\r\n\r\n  updateCetusCycle() {\r\n    fetch('https://api.warframestat.us/pc')\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        const cycleStats = res.cetusCycle\r\n        this.cycleStats = cycleStats\r\n        this.bellPlayed = false\r\n        if (this.cycleStats)\r\n          this.dayOrNight = this.cycleStats.isDay ? 'day' : 'night'\r\n        console.log(this.cycleStats, new Date())\r\n        this.updateTimeLeft()\r\n        if (this.timeInterval) clearInterval(this.timeInterval)\r\n        if (this.timeLeft < 0) {\r\n          clearInterval(this.timeInterval)\r\n          this.timeLeft = 0\r\n          this.timeInterval = setInterval(() => {\r\n            this.updateCetusCycle()\r\n          }, 20000)\r\n        } else {\r\n          this.timeInterval = setInterval(() => {\r\n            this.updateTimeLeft()\r\n            if (this.timeLeft < 0) {\r\n              clearInterval(this.timeInterval)\r\n              this.updateCetusCycle()\r\n            }\r\n          }, 250)\r\n        }\r\n        try {\r\n          let bounties = res.syndicateMissions.find(\r\n            missions => missions.syndicate === 'Ostrons'\r\n          )\r\n          this.bounties = bounties\r\n          console.log(toJS(this.bounties))\r\n        } catch (error) {\r\n          console.warn('Bounties not found')\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setTimeout(() => {\r\n          this.updateCetusCycle()\r\n        }, 30000)\r\n      })\r\n  }\r\n\r\n  updateTimeLeft() {\r\n    this.timeLeft = new Date(this.cycleStats.expiry).getTime() - Date.now()\r\n    if (\r\n      this.cycleStats &&\r\n      this.dayOrNight === 'day' &&\r\n      this.soundEnabled &&\r\n      this.timeLeft < 5000 &&\r\n      this.timeLeft > 0 &&\r\n      !this.bellPlayed\r\n    ) {\r\n      bell.play()\r\n      this.bellPlayed = true\r\n    }\r\n  }\r\n}\r\n\r\nfunction msToTime(s) {\r\n  let ms = s % 1000\r\n  s = (s - ms) / 1000\r\n  let secs = s % 60\r\n  s = (s - secs) / 60\r\n  let mins = s % 60\r\n  let hrs = (s - mins) / 60\r\n  return (\r\n    hrs +\r\n    ':' +\r\n    (mins < 10 ? '0' + mins : mins) +\r\n    ':' +\r\n    (secs < 10 ? '0' + secs : secs)\r\n  )\r\n}\r\n\r\nexport default observer(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}